FROM python:3.11-slim-bullseye

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    POETRY_VERSION=1.7.1 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    POETRY_CACHE_DIR=/opt/poetry/cache \
    VENV_PATH="/app/.venv"

ENV PATH="/opt/poetry/bin:$VENV_PATH/bin:$PATH"

WORKDIR /app

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    docker.io \
    curl \
    gcc \
    g++ \
    make \
    libffi-dev \
    gfortran \
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    && rm -rf /var/lib/apt/lists/*

# Crear usuario y grupo con home directory
RUN groupadd -r appgroup && \
    useradd -r -m -g appgroup -d /home/appuser appuser && \
    mkdir -p /home/appuser/.cache && \
    mkdir -p /home/appuser/.local && \
    mkdir -p /home/appuser/.config && \
    chown -R appuser:appgroup /home/appuser && \
    chmod -R 755 /home/appuser

# Instalar Poetry y configurar cache
RUN curl -sSL https://install.python-poetry.org | python3 - --version ${POETRY_VERSION} && \
    chmod a+x "${POETRY_HOME}/bin/poetry" && \
    mkdir -p $POETRY_CACHE_DIR && \
    chown -R appuser:appgroup $POETRY_CACHE_DIR

# Crear estructura de directorios
RUN mkdir -p /app/logs \
            /app/.venv \
    && chown -R appuser:appgroup /app \
    && chmod -R 777 /app

# Configurar Poetry
USER appuser
RUN mkdir -p /home/appuser/.config/pypoetry && \
    poetry config cache-dir $POETRY_CACHE_DIR

# Copiar archivos del proyecto
COPY --chown=appuser:appgroup pyproject.toml poetry.lock ./
COPY --chown=appuser:appgroup src/manager.py .

# Instalar dependencias con Poetry
RUN poetry install --only main --no-root --no-interaction

USER root
# Crear script de inicio
RUN echo '#!/bin/bash\n\
umask 0000\n\
\n\
# Asegurar permisos del socket de Docker\n\
if [ -S /var/run/docker.sock ]; then\n\
    DOCKER_GID=$(stat -c "%g" /var/run/docker.sock)\n\
    groupadd -g ${DOCKER_GID} docker-external || true\n\
    usermod -aG docker-external appuser\n\
    chmod 666 /var/run/docker.sock\n\
fi\n\
\n\
# Asegurar permisos de logs\n\
chmod -R 777 /app/logs\n\
\n\
exec su -s /bin/bash -c "poetry run python manager.py" appuser\n\
' > /app/start.sh && \
    chmod +x /app/start.sh

CMD ["/app/start.sh"]